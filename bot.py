import asyncio
import logging
import json
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from config import BOT_TOKEN, ADMIN_CHAT_ID
# from google_sheets import GoogleSheetsManager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ú–µ–Ω–µ–¥–∂–µ—Ä Google Sheets (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω)
# sheets_manager = GoogleSheetsManager()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class OrderStates(StatesGroup):
    waiting_for_name = State()
    waiting_for_phone = State()
    waiting_for_location = State()
    waiting_for_brand = State()
    waiting_for_watch_model = State()
    waiting_for_payment = State()
    waiting_for_admin_approval = State()

# –ë—Ä–µ–Ω–¥—ã —á–∞—Å–æ–≤
WATCH_BRANDS = ["Rolex", "Patek Philippe", "Tissot"]

# –ú–æ–¥–µ–ª–∏ —á–∞—Å–æ–≤ –ø–æ –±—Ä–µ–Ω–¥–∞–º —Å –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
WATCH_MODELS_BY_BRAND = {
    "Rolex": [
        {
            "name": "Submariner",
            "price": "‚ÇΩ2,500,000",
            "mechanism": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∑–º Rolex 3235",
            "description": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–µ –¥–∞–π–≤–µ—Ä—Å–∫–∏–µ —á–∞—Å—ã —Å –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å—é –¥–æ 300–º",
            "photo": "https://images.unsplash.com/photo-1523170335258-f5b6c6e8e4c4?w=500&h=500&fit=crop",
            "detailed_info": "Rolex Submariner - —ç—Ç–æ –∫—É–ª—å—Ç–æ–≤—ã–µ –¥–∞–π–≤–µ—Ä—Å–∫–∏–µ —á–∞—Å—ã, –∫–æ—Ç–æ—Ä—ã–µ —Å—Ç–∞–ª–∏ —Å–∏–º–≤–æ–ª–æ–º –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ—Å—Ç–∏–∂–∞. –ö–æ—Ä–ø—É—Å –∏–∑ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏ 904L, —Å–∞–ø—Ñ–∏—Ä–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ, –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –¥–æ 300 –º–µ—Ç—Ä–æ–≤. –ú–µ—Ö–∞–Ω–∏–∑–º Rolex 3235 —Å –∑–∞–ø–∞—Å–æ–º —Ö–æ–¥–∞ 70 —á–∞—Å–æ–≤."
        },
        {
            "name": "GMT-Master II",
            "price": "‚ÇΩ2,800,000",
            "mechanism": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∑–º Rolex 3285",
            "description": "–ß–∞—Å—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ —Å —Ñ—É–Ω–∫—Ü–∏–µ–π GMT",
            "photo": "https://images.unsplash.com/photo-1523275335684-37898b6baf30?w=500&h=500&fit=crop",
            "detailed_info": "Rolex GMT-Master II - –∏–¥–µ–∞–ª—å–Ω—ã–µ —á–∞—Å—ã –¥–ª—è –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤. –ü–æ–∑–≤–æ–ª—è—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤—Ä–µ–º—è –≤ –¥–≤—É—Ö —á–∞—Å–æ–≤—ã—Ö –ø–æ—è—Å–∞—Ö –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ. –ö–æ—Ä–ø—É—Å –∏–∑ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏, –∫–µ—Ä–∞–º–∏—á–µ—Å–∫–∏–π –±–µ–∑–µ–ª—å, –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –¥–æ 100 –º–µ—Ç—Ä–æ–≤."
        }
    ],
    "Patek Philippe": [
        {
            "name": "Calatrava",
            "price": "‚ÇΩ3,500,000",
            "mechanism": "–†—É—á–Ω–æ–π –∑–∞–≤–æ–¥ –º–µ—Ö–∞–Ω–∏–∑–º 324 S C",
            "description": "–≠–ª–µ–≥–∞–Ω—Ç–Ω—ã–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —á–∞—Å—ã –∏–∑ –±–µ–ª–æ–≥–æ –∑–æ–ª–æ—Ç–∞",
            "photo": "https://images.unsplash.com/photo-1594534475808-b18fc33b045e?w=500&h=500&fit=crop",
            "detailed_info": "Patek Philippe Calatrava - –≤–æ–ø–ª–æ—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π —ç–ª–µ–≥–∞–Ω—Ç–Ω–æ—Å—Ç–∏. –ö–æ—Ä–ø—É—Å –∏–∑ –±–µ–ª–æ–≥–æ –∑–æ–ª–æ—Ç–∞ 18–∫, —Å–∞–ø—Ñ–∏—Ä–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ —Å –∞–Ω—Ç–∏–±–ª–∏–∫–æ–≤—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º. –ú–µ—Ö–∞–Ω–∏–∑–º —Ä—É—á–Ω–æ–≥–æ –∑–∞–≤–æ–¥–∞ —Å –∑–∞–ø–∞—Å–æ–º —Ö–æ–¥–∞ 45 —á–∞—Å–æ–≤. –°–∏–º–≤–æ–ª –ø—Ä–µ—Å—Ç–∏–∂–∞ –∏ –∏–∑—ã—Å–∫–∞–Ω–Ω–æ–≥–æ –≤–∫—É—Å–∞."
        },
        {
            "name": "Nautilus",
            "price": "‚ÇΩ4,200,000",
            "mechanism": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∑–º 26-330 S C",
            "description": "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã –≤ —Å—Ç–∞–ª—å–Ω–æ–º –∫–æ—Ä–ø—É—Å–µ",
            "photo": "https://images.unsplash.com/photo-1558618047-3c8c76ca7d13?w=500&h=500&fit=crop",
            "detailed_info": "Patek Philippe Nautilus - —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã —Å —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º –≤ –≤–∏–¥–µ –∏–ª–ª—é–º–∏–Ω–∞—Ç–æ—Ä–∞. –ö–æ—Ä–ø—É—Å –∏–∑ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏, –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –¥–æ 120 –º–µ—Ç—Ä–æ–≤. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∑–º —Å –∑–∞–ø–∞—Å–æ–º —Ö–æ–¥–∞ 45 —á–∞—Å–æ–≤."
        }
    ],
    "Tissot": [
        {
            "name": "Le Locle",
            "price": "‚ÇΩ45,000",
            "mechanism": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∑–º ETA 2824-2",
            "description": "–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ —á–∞—Å—ã —Å –∞–≤—Ç–æ–ø–æ–¥–∑–∞–≤–æ–¥–æ–º",
            "photo": "https://images.unsplash.com/photo-1542496658-e33a6d0d50f6?w=500&h=500&fit=crop",
            "detailed_info": "Tissot Le Locle - –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ —á–∞—Å—ã —Å —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º. –ö–æ—Ä–ø—É—Å –∏–∑ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏, —Å–∞–ø—Ñ–∏—Ä–æ–≤–æ–µ —Å—Ç–µ–∫–ª–æ, –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –¥–æ 30 –º–µ—Ç—Ä–æ–≤. –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∑–º ETA 2824-2 —Å –∑–∞–ø–∞—Å–æ–º —Ö–æ–¥–∞ 38 —á–∞—Å–æ–≤."
        },
        {
            "name": "PRX",
            "price": "‚ÇΩ35,000",
            "mechanism": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–µ—Ö–∞–Ω–∏–∑–º Powermatic 80",
            "description": "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —á–∞—Å—ã –≤ —Å—Ç–∏–ª–µ 70-—Ö",
            "photo": "https://images.unsplash.com/photo-1523170335258-f5b6c6e8e4c4?w=500&h=500&fit=crop",
            "detailed_info": "Tissot PRX - —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏—Ö —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö —á–∞—Å–æ–≤ 70-—Ö –≥–æ–¥–æ–≤. –ö–æ—Ä–ø—É—Å –∏–∑ –Ω–µ—Ä–∂–∞–≤–µ—é—â–µ–π —Å—Ç–∞–ª–∏, –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±—Ä–∞—Å–ª–µ—Ç, –≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º–æ—Å—Ç—å –¥–æ 100 –º–µ—Ç—Ä–æ–≤. –ú–µ—Ö–∞–Ω–∏–∑–º Powermatic 80 —Å –∑–∞–ø–∞—Å–æ–º —Ö–æ–¥–∞ 80 —á–∞—Å–æ–≤."
        }
    ]
}

# –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã
PAYMENT_METHODS = [
    "–ù–∞–ª–∏—á–Ω—ã–µ",
    "–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞",
    "–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É",
    "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
]

@dp.message(Command("start"))
async def start_command(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    # –°–æ–∑–¥–∞–µ–º reply keyboard —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üéØ –ê–∫—Ü–∏–∏")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ª–æ–≥–æ—Ç–∏–ø–æ–º
    welcome_text = """
üï∞Ô∏è <b>BRO WATCHES</b> üï∞Ô∏è

‚ú® <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∏—Ä –ø—Ä–µ–º–∏–∞–ª—å–Ω—ã—Ö —á–∞—Å–æ–≤!</b> ‚ú®

–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏—Ö —á–∞—Å–æ–≤ –æ—Ç –≤–µ–¥—É—â–∏—Ö –±—Ä–µ–Ω–¥–æ–≤. –ö–∞–∂–¥—ã–µ —á–∞—Å—ã - —ç—Ç–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞, —Å–æ—á–µ—Ç–∞—é—â–µ–µ –≤ —Å–µ–±–µ –±–µ–∑—É–ø—Ä–µ—á–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ, —ç–ª–µ–≥–∞–Ω—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω –∏ –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç—å.

üèÜ <b>–ù–∞—à–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ —à–≤–µ–π—Ü–∞—Ä—Å–∫–∏–µ —á–∞—Å—ã
‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ –∫–∞–∂–¥–æ–º—É –∫–ª–∏–µ–Ω—Ç—É
‚Ä¢ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–π –†–æ—Å—Å–∏–∏

–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª –≤ –º–µ–Ω—é –Ω–∏–∂–µ üëá
    """
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –ª–æ–≥–æ—Ç–∏–ø–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∞—Å–∏–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —á–∞—Å–æ–≤)
    logo_url = "https://images.unsplash.com/photo-1523170335258-f5b6c6e8e4c4?w=500&h=500&fit=crop&crop=center"
    
    try:
        await message.answer_photo(
            photo=logo_url,
            caption=welcome_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø: {e}")
        await message.answer(
            welcome_text,
            parse_mode="HTML",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@dp.message(lambda message: message.text == "üìö –ö–∞—Ç–∞–ª–æ–≥")
async def catalog_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–∞—Ç–∞–ª–æ–≥"""
    await message.answer("üìö –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–∞–ª–æ–≥ —á–∞—Å–æ–≤...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º
    for brand, models in WATCH_MODELS_BY_BRAND.items():
        await message.answer(f"üè∑Ô∏è **{brand}**", parse_mode="Markdown")
        
        for i, model in enumerate(models, 1):
            try:
                await message.answer_photo(
                    photo=model["photo"],
                    caption=f"**{i}. {brand} {model['name']}**\n\n"
                           f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
                           f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
                           f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}",
                    parse_mode="Markdown"
                )
            except Exception as e:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è {brand} {model['name']}: {e}")
                await message.answer(
                    f"**{i}. {brand} {model['name']}**\n\n"
                    f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
                    f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}",
                    parse_mode="Markdown"
                )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–µ–Ω–¥–∞–º–∏
        await asyncio.sleep(0.5)
    
    # –î–æ–±–∞–≤–ª—è–µ–º reply –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    await message.answer(
        "‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω!\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.text == "üéØ –ê–∫—Ü–∏–∏")
async def promotions_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ê–∫—Ü–∏–∏"""
    await message.answer(
        "üéØ <b>–ê–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è</b>\n\n"
        "üî• <b>–°–∫–∏–¥–∫–∞ 15% –Ω–∞ –≤—Å–µ –º–æ–¥–µ–ª–∏ Tissot</b>\n"
        "‚è∞ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –∫–æ–Ω—Ü–∞ –º–µ—Å—è—Ü–∞\n\n"
        "üíé <b>–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞</b>\n"
        "üöö –ü—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 100,000‚ÇΩ\n\n"
        "üéÅ <b>–ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞</b>\n"
        "üéÄ –ü—Ä–∏ –ø–æ–∫—É–ø–∫–µ –ª—é–±—ã—Ö —á–∞—Å–æ–≤\n\n"
        "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º reply –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–æ–Ω—Ç–∞–∫—Ç—ã"""
    await message.answer(
        "üìû <b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã</b>\n\n"
        "üï∞Ô∏è <b>BRO WATCHES</b>\n\n"
        "üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> +7 (999) 123-45-67\n"
        "üìß <b>Email:</b> info@browatches.ru\n"
        "üåê <b>–°–∞–π—Ç:</b> www.browatches.ru\n\n"
        "üìç <b>–ê–¥—Ä–µ—Å:</b>\n"
        "–ú–æ—Å–∫–≤–∞, —É–ª. –¢–≤–µ—Ä—Å–∫–∞—è, 15\n"
        "–º. –¢–≤–µ—Ä—Å–∫–∞—è, –≤—ã—Ö–æ–¥ 3\n\n"
        "üïí <b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>\n"
        "–ü–Ω-–ü—Ç: 10:00 - 20:00\n"
        "–°–±-–í—Å: 11:00 - 19:00\n\n"
        "üí¨ <b>Telegram:</b> @browatches_support",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º reply –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    await message.answer(
        "–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=keyboard
    )

@dp.message(lambda message: message.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_menu(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ü–æ–º–æ—â—å"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìö –ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="help_order")],
        [InlineKeyboardButton(text="üí≥ –°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã", callback_data="help_payment")],
        [InlineKeyboardButton(text="üöö –î–æ—Å—Ç–∞–≤–∫–∞", callback_data="help_delivery")],
        [InlineKeyboardButton(text="üîí –ì–∞—Ä–∞–Ω—Ç–∏–∏", callback_data="help_warranty")]
    ])
    
    await message.answer(
        "‚ùì <b>–ü–æ–º–æ—â—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å —Ä–∞–∑–¥–µ–ª:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "help_order")
async def help_order_callback(callback_query: CallbackQuery):
    """–ü–æ–º–æ—â—å –ø–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞"""
    await callback_query.answer()
    await callback_query.message.answer(
        "üìö <b>–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</b>\n\n"
        "1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ö–∞—Ç–∞–ª–æ–≥'\n"
        "2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ '–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑'\n"
        "3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ\n"
        "4Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å —á–∞—Å–æ–≤\n"
        "5Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã\n"
        "6Ô∏è‚É£ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
        "üí° <b>–°–æ–≤–µ—Ç:</b> –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –∑–∞–∫–∞–∑–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º reply –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    await callback_query.message.answer(
        "–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "help_payment")
async def help_payment_callback(callback_query: CallbackQuery):
    """–ü–æ–º–æ—â—å –ø–æ —Å–ø–æ—Å–æ–±–∞–º –æ–ø–ª–∞—Ç—ã"""
    await callback_query.answer()
    await callback_query.message.answer(
        "üí≥ <b>–°–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</b>\n\n"
        "üí∞ <b>–ù–∞–ª–∏—á–Ω—ã–µ</b> - –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏\n"
        "üí≥ <b>–ë–∞–Ω–∫–æ–≤—Å–∫–∞—è –∫–∞—Ä—Ç–∞</b> - –æ–Ω–ª–∞–π–Ω\n"
        "üè¶ <b>–ü–µ—Ä–µ–≤–æ–¥ –Ω–∞ –∫–∞—Ä—Ç—É</b> - –°–ë–ü\n"
        "‚Çø <b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞</b> - Bitcoin, Ethereum\n\n"
        "üîí –í—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞—â–∏—â–µ–Ω—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º reply –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    await callback_query.message.answer(
        "–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "help_delivery")
async def help_delivery_callback(callback_query: CallbackQuery):
    """–ü–æ–º–æ—â—å –ø–æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
    await callback_query.answer()
    await callback_query.message.answer(
        "üöö <b>–î–æ—Å—Ç–∞–≤–∫–∞</b>\n\n"
        "üìç <b>–ü–æ –ú–æ—Å–∫–≤–µ:</b> 1-2 –¥–Ω—è (–±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç 100,000‚ÇΩ)\n"
        "üá∑üá∫ <b>–ü–æ –†–æ—Å—Å–∏–∏:</b> 3-7 –¥–Ω–µ–π (–æ—Ç 500‚ÇΩ)\n"
        "üåç <b>–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è:</b> 7-14 –¥–Ω–µ–π (–æ—Ç 2,000‚ÇΩ)\n\n"
        "üì¶ <b>–£–ø–∞–∫–æ–≤–∫–∞:</b> –ü–æ–¥–∞—Ä–æ—á–Ω–∞—è —É–ø–∞–∫–æ–≤–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞\n"
        "üîí <b>–°—Ç—Ä–∞—Ö–æ–≤–∫–∞:</b> –ü–æ–ª–Ω–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –≥—Ä—É–∑–∞\n"
        "üì± <b>–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ:</b> SMS-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º reply –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    await callback_query.message.answer(
        "–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "help_warranty")
async def help_warranty_callback(callback_query: CallbackQuery):
    """–ü–æ–º–æ—â—å –ø–æ –≥–∞—Ä–∞–Ω—Ç–∏—è–º"""
    await callback_query.answer()
    await callback_query.message.answer(
        "üîí <b>–ì–∞—Ä–∞–Ω—Ç–∏–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã</b>\n\n"
        "‚úÖ <b>–ì–∞—Ä–∞–Ω—Ç–∏—è –ø–æ–¥–ª–∏–Ω–Ω–æ—Å—Ç–∏</b> - –≤—Å–µ —á–∞—Å—ã –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ\n"
        "üìú <b>–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã</b> - –ø–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤\n"
        "üõ°Ô∏è <b>–ì–∞—Ä–∞–Ω—Ç–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è</b> - –æ—Ç 2 –ª–µ—Ç\n"
        "üîß <b>–°–µ—Ä–≤–∏—Å–Ω–æ–µ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ</b> - –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã\n\n"
        "üíé <b>–í–æ–∑–≤—Ä–∞—Ç –∏ –æ–±–º–µ–Ω:</b> 14 –¥–Ω–µ–π —Å –º–æ–º–µ–Ω—Ç–∞ –ø–æ–∫—É–ø–∫–∏",
        parse_mode="HTML"
    )
    
    # –î–æ–±–∞–≤–ª—è–µ–º reply –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    await callback_query.message.answer(
        "–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.message(Command("menu"))
async def menu_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üéØ –ê–∫—Ü–∏–∏")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"
@dp.message(lambda message: message.text == "üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")
async def start_order_from_button(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑"""
    await state.set_state(OrderStates.waiting_for_name)
    await message.answer(
        "üõí <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
@dp.message(lambda message: message.text in ["üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "–ù–∞–∑–∞–¥", "–ú–µ–Ω—é"])
async def back_to_menu(message: types.Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üõí –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑")],
            [KeyboardButton(text="üìö –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton(text="üéØ –ê–∫—Ü–∏–∏")],
            [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã"), KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
        ],
        resize_keyboard=True,
        persistent=True
    )
    
    await message.answer(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:",
        parse_mode="HTML",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data == "view_catalog")
async def view_catalog_callback(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞"""
    await callback_query.answer()
    await callback_query.message.answer("üìö –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–∞–ª–æ–≥ —á–∞—Å–æ–≤...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º
    for brand, models in WATCH_MODELS_BY_BRAND.items():
        await callback_query.message.answer(f"üè∑Ô∏è **{brand}**", parse_mode="Markdown")
        
        for i, model in enumerate(models, 1):
            try:
                await callback_query.message.answer_photo(
                    photo=model["photo"],
                    caption=f"**{i}. {brand} {model['name']}**\n\n"
                           f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
                           f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
                           f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}",
                    parse_mode="Markdown"
                )
            except Exception as e:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è {brand} {model['name']}: {e}")
                await callback_query.message.answer(
                    f"**{i}. {brand} {model['name']}**\n\n"
                    f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
                    f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}",
                    parse_mode="Markdown"
                )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–µ–Ω–¥–∞–º–∏
        await asyncio.sleep(0.5)
    
    await callback_query.message.answer("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω! –î–ª—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

@dp.callback_query(lambda c: c.data == "start_order")
async def start_order_callback(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞"""
    await callback_query.answer()
    await state.set_state(OrderStates.waiting_for_name)
    await callback_query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:"
    )

@dp.message(OrderStates.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    await state.update_data(name=message.text)
    await state.set_state(OrderStates.waiting_for_phone)
    await message.answer("üìû –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")

@dp.message(OrderStates.waiting_for_phone)
async def process_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    await state.update_data(phone=message.text)
    await state.set_state(OrderStates.waiting_for_location)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é", request_location=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    
    await message.answer("üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏:", reply_markup=keyboard)

@dp.message(OrderStates.waiting_for_location)
async def process_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏"""
    if message.location:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        location_data = {
            'latitude': message.location.latitude,
            'longitude': message.location.longitude
        }
        await state.update_data(location=location_data)
        await state.set_state(OrderStates.waiting_for_brand)
        
        # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        await message.answer("‚úÖ –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞!", reply_markup=types.ReplyKeyboardRemove())
        
        # –°–æ–∑–¥–∞–µ–º reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –±—Ä–µ–Ω–¥–∞–º–∏ —á–∞—Å–æ–≤
        keyboard = ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="Rolex")],
                [KeyboardButton(text="Patek Philippe")],
                [KeyboardButton(text="Tissot")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ —á–∞—Å–æ–≤:", reply_markup=keyboard)
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.")

@dp.message(OrderStates.waiting_for_brand)
async def process_brand_selection(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±—Ä–µ–Ω–¥–∞ —á–∞—Å–æ–≤"""
    brand = message.text
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if brand not in WATCH_BRANDS:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –±—Ä–µ–Ω–¥ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –±—Ä–µ–Ω–¥
    await state.update_data(selected_brand=brand)
    await state.set_state(OrderStates.waiting_for_watch_model)
    
    # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await message.answer("‚úÖ –ë—Ä–µ–Ω–¥ –≤—ã–±—Ä–∞–Ω!", reply_markup=types.ReplyKeyboardRemove())
    
    # –ü–æ–ª—É—á–∞–µ–º –º–æ–¥–µ–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –±—Ä–µ–Ω–¥–∞
    models = WATCH_MODELS_BY_BRAND[brand]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –º–æ–¥–µ–ª—å —Å —Ñ–æ—Ç–æ –∏ –∫–Ω–æ–ø–∫–æ–π –≤—ã–±–æ—Ä–∞
    for i, model in enumerate(models):
        try:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π "–í—ã–±—Ä–∞—Ç—å"
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_model_{brand}_{i}")]
            ])
            
            await message.answer_photo(
                photo=model["photo"],
                caption=f"‚åö {brand} {model['name']}\n\n"
                       f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
                       f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
                       f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}",
                reply_markup=keyboard
            )
        except Exception as e:
            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è {brand} {model['name']}: {e}")
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å", callback_data=f"select_model_{brand}_{i}")]
            ])
            
            await message.answer(
                f"‚åö {brand} {model['name']}\n\n"
                f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
                f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}",
                reply_markup=keyboard
            )

@dp.callback_query(lambda c: c.data.startswith("select_model_"))
async def process_model_selection(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–¥–µ–ª–∏ —á–∞—Å–æ–≤"""
    await callback_query.answer()
    
    # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback_data
    parts = callback_query.data.split("_")
    brand = parts[2]
    model_index = int(parts[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    model = WATCH_MODELS_BY_BRAND[brand][model_index]
    full_model_name = f"{brand} {model['name']}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
    await state.update_data(watch_model=full_model_name)
    await state.set_state(OrderStates.waiting_for_payment)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏
    try:
        await callback_query.message.answer_photo(
            photo=model["photo"],
            caption=f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {full_model_name}\n\n"
                   f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
                   f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
                   f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {model['detailed_info']}"
        )
    except Exception as e:
        logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è {full_model_name}: {e}")
        await callback_query.message.answer(
            f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ –º–æ–¥–µ–ª—å: {full_model_name}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
            f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
            f"üìù –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {model['detailed_info']}"
        )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–æ—Å–æ–±–∞–º–∏ –æ–ø–ª–∞—Ç—ã
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=method, callback_data=f"payment_{i}")] 
        for i, method in enumerate(PAYMENT_METHODS)
    ])
    
    await callback_query.message.answer(
        "üí≥ –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:",
        reply_markup=keyboard
    )

@dp.callback_query(lambda c: c.data.startswith("payment_"))
async def process_payment_method(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –æ–ø–ª–∞—Ç—ã"""
    await callback_query.answer()
    payment_index = int(callback_query.data.split("_")[1])
    selected_payment = PAYMENT_METHODS[payment_index]
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order_data = await state.get_data()
    order_data['payment_method'] = selected_payment
    order_data['user_id'] = callback_query.from_user.id
    order_data['username'] = callback_query.from_user.username
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
    await process_order_data(callback_query.from_user.id, order_data)
    await state.clear()

@dp.message(Command("catalog"))
async def catalog_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ —á–∞—Å–æ–≤"""
    await message.answer("üìö –ó–∞–≥—Ä—É–∂–∞—é –∫–∞—Ç–∞–ª–æ–≥ —á–∞—Å–æ–≤...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—ã –ø–æ –±—Ä–µ–Ω–¥–∞–º
    for brand, models in WATCH_MODELS_BY_BRAND.items():
        await message.answer(f"üè∑Ô∏è **{brand}**", parse_mode="Markdown")
        
        for i, model in enumerate(models, 1):
            try:
                await message.answer_photo(
                    photo=model["photo"],
                    caption=f"**{i}. {brand} {model['name']}**\n\n"
                           f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
                           f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
                           f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}",
                    parse_mode="Markdown"
                )
            except Exception as e:
                # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ –¥–ª—è {brand} {model['name']}: {e}")
                await message.answer(
                    f"**{i}. {brand} {model['name']}**\n\n"
                    f"üí∞ –¶–µ–Ω–∞: {model['price']}\n"
                    f"‚öôÔ∏è –ú–µ—Ö–∞–Ω–∏–∑–º: {model['mechanism']}\n"
                    f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {model['description']}",
                    parse_mode="Markdown"
                )
        
        # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –±—Ä–µ–Ω–¥–∞–º–∏
        await asyncio.sleep(0.5)
    
    await message.answer("‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω! –î–ª—è –∑–∞–∫–∞–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start")

@dp.message(Command("admin"))
async def admin_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∞–¥–º–∏–Ω–∞ - –ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if message.from_user.id == ADMIN_CHAT_ID:
        await message.answer("–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n/orders - –ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤")
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")

async def process_order_data(user_id: int, order_data: dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Google Sheets (–≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ)
        # await sheets_manager.add_order(order_data)
        logging.info(f"–ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω: {order_data}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(
            user_id,
            "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –∑–∞–∫–∞–∑ –±—É–¥–µ—Ç –ø—Ä–∏–Ω—è—Ç."
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        from aiogram.fsm.context import FSMContext
        from aiogram.fsm.storage.base import StorageKey
        
        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)
        state = FSMContext(storage=storage, key=storage_key)
        await state.set_state(OrderStates.waiting_for_admin_approval)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_order_{user_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"reject_order_{user_id}")
            ]
        ])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∞
        admin_message = f"ÔøΩÔøΩ –ù–æ–≤—ã–π –∑–∞–∫–∞–∑!\n\n"
        admin_message += f"üë§ –ö–ª–∏–µ–Ω—Ç: {order_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        admin_message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {order_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
        if 'location' in order_data:
            location = order_data['location']
            admin_message += f"üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è: {location['latitude']}, {location['longitude']}\n"
        else:
            admin_message += f"üìç –ê–¥—Ä–µ—Å: {order_data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            
        admin_message += f"‚åö –ú–æ–¥–µ–ª—å: {order_data.get('watch_model', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        admin_message += f"üí≥ –û–ø–ª–∞—Ç–∞: {order_data.get('payment_method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
        admin_message += f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}"
        
        await bot.send_message(
            ADMIN_CHAT_ID,
            admin_message,
            reply_markup=keyboard
        )
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ—ë –∞–¥–º–∏–Ω—É
        if 'location' in order_data:
            location = order_data['location']
            await bot.send_location(
                ADMIN_CHAT_ID,
                latitude=location['latitude'],
                longitude=location['longitude']
            )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {e}")
        await bot.send_message(user_id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")

@dp.message(lambda message: message.web_app_data is not None)
async def handle_web_app_data(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Mini App
        order_data = json.loads(message.web_app_data.data)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        order_data['user_id'] = message.from_user.id
        order_data['username'] = message.from_user.username
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑
        await process_order_data(message.from_user.id, order_data)
        
    except json.JSONDecodeError:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Mini App: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞")

@dp.message(lambda message: message.location is not None)
async def handle_location(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–π –ª–æ–∫–∞—Ü–∏–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        latitude = message.location.latitude
        longitude = message.location.longitude
        
        # –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        order_data = {
            'user_id': message.from_user.id,
            'username': message.from_user.username,
            'name': message.from_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'phone': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'location': {
                'latitude': latitude,
                'longitude': longitude
            },
            'watch_model': '–ù–µ —É–∫–∞–∑–∞–Ω–æ',
            'payment_method': '–ù–µ —É–∫–∞–∑–∞–Ω–æ'
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é –∞–¥–º–∏–Ω—É
        await bot.send_location(
            ADMIN_CHAT_ID,
            latitude=latitude,
            longitude=longitude
        )
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø—Ä–∏–Ω—è—Ç–∏—è/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f"accept_order_{message.from_user.id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_order_{message.from_user.id}")
            ]
        ])
        
        await bot.send_message(
            ADMIN_CHAT_ID,
            f"üìç –ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞!\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {order_data['name']}\n"
            f"üÜî ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}\n"
            f"üìç –õ–æ–∫–∞—Ü–∏—è: {latitude}, {longitude}\n\n"
            f"–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –æ—Ç–∫–ª–æ–Ω–∏—Ç—å?",
            reply_markup=keyboard
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞
        from aiogram.fsm.context import FSMContext
        from aiogram.fsm.storage.base import StorageKey
        
        storage_key = StorageKey(bot_id=bot.id, chat_id=message.from_user.id, user_id=message.from_user.id)
        state = FSMContext(storage=storage, key=storage_key)
        await state.set_state(OrderStates.waiting_for_admin_approval)
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.answer(
            "üìç –ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.\n\n"
            "–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è - –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
            reply_markup=types.ReplyKeyboardRemove()
        )
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–æ–∫–∞—Ü–∏–∏")

@dp.callback_query(lambda c: c.data.startswith("accept_order_"))
async def handle_accept_order(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–Ω—è—Ç–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    if callback_query.from_user.id != ADMIN_CHAT_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    user_id = int(callback_query.data.split("_")[2])
    
    try:
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞
        await bot.send_message(
            user_id,
            "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!\n\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –¥–æ—Å—Ç–∞–≤–∫–∏."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await callback_query.message.edit_text(
            callback_query.message.text + "\n\n‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω –∞–¥–º–∏–Ω–æ–º",
            reply_markup=None
        )
        
        await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ –∑–∞–∫–∞–∑–∞")

@dp.callback_query(lambda c: c.data.startswith("reject_order_"))
async def handle_reject_order(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∞–¥–º–∏–Ω–æ–º"""
    if callback_query.from_user.id != ADMIN_CHAT_ID:
        await callback_query.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è")
        return
    
    user_id = int(callback_query.data.split("_")[2])
    
    try:
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from aiogram.fsm.context import FSMContext
        from aiogram.fsm.storage.base import StorageKey
        
        storage_key = StorageKey(bot_id=bot.id, chat_id=user_id, user_id=user_id)
        state = FSMContext(storage=storage, key=storage_key)
        await state.clear()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –æ–± –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞
        await bot.send_message(
            user_id,
            "‚ùå –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–∫–∞–∑ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π."
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∞
        await callback_query.message.edit_text(
            callback_query.message.text + "\n\n‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º",
            reply_markup=None
        )
        
        await callback_query.answer("–ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω!")
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")
        await callback_query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    try:
        # –£–¥–∞–ª—è–µ–º webhook –µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling
        await dp.start_polling(bot)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")

if __name__ == "__main__":
    asyncio.run(main())
