import asyncio
from aiohttp import web
import os
from config import WEB_SERVER_PORT

async def serve_webapp(request):
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–¥–∞—á–∏ Mini App"""
    webapp_path = os.path.join(os.path.dirname(__file__), 'webapp', 'index.html')
    
    try:
        with open(webapp_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        return web.Response(
            text=content,
            content_type='text/html',
            headers={
                'Access-Control-Allow-Origin': '*',
                'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',
                'Access-Control-Allow-Headers': 'Content-Type'
            }
        )
    except FileNotFoundError:
        return web.Response(text="Mini App –Ω–µ –Ω–∞–π–¥–µ–Ω", status=404)

async def init_app():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    app = web.Application()
    
    # –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è Mini App
    app.router.add_get('/webapp/index.html', serve_webapp)
    app.router.add_get('/webapp/', serve_webapp)
    
    return app

async def start_web_server():
    """–ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    app = await init_app()
    runner = web.AppRunner(app)
    await runner.setup()
    
    site = web.TCPSite(runner, 'localhost', WEB_SERVER_PORT)
    await site.start()
    
    print(f"üåê –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:{WEB_SERVER_PORT}")
    print(f"üì± Mini App –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:{WEB_SERVER_PORT}/webapp/index.html")
    
    # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
    try:
        await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
    except KeyboardInterrupt:
        print("\nüõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    finally:
        await runner.cleanup()

if __name__ == "__main__":
    asyncio.run(start_web_server())
